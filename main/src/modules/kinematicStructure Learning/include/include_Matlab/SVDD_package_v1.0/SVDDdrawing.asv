function SVDDdrawing(x,y,SET,kernel_param,kernel_type, class_idx)

%=============== SVDD Boundary Drawing ===============
% [Input]
%   x: training data
%   SV: support vector
%   R2: R2 is the distance from the center of the sphere
%       a to the boundary
%   alpha: Lagrange multiplier
%   kernel: kernel type
%   kern_param: kernel parameter
%   class_idx: class label
%
% Hyung jin Chang 06/10/2008
% hjchang@neuro.snu.ac.kr
%======================================================

ndata = SET.S.ndata + SET.E.ndata + SET.O.ndata;
x = [SET.S.x ; SET.E.x ; SET.O.x];
y = [SET.S.y ; SET.E.y ; SET.O.y];
alpha = [SET.S.alpha ; SET.E.alpha ; SET.O.alpha];
g = [SET.S.g ; SET.E.g ; SET.O.g];
SV = SET.S.x;
[R2, a] = boundary(x,y,alpha);

% global C;
% global kernel_param;
% global kernel_type;
% global alpha;
% global SV
% global SV_class_idx
% global a
% global R2
% global learning_type;
% global num_class
% global SET
% global g

% switch learning_type
%     case {'batch'}
%         [ndata, ndim] = size(x);
%     case {'incremental'}
%         [ndata, ndim] = size(SV);
% end

[ndata, ndim] = size(x);

data_min = min(x,[],1);
data_max = max(x,[],1);       

cVec = 'rbkgcmyrbkgcmybrkgcmybrkgcmybrkgcmybrkgcmy';

if ndim == 2    
    syms Z x1 y1;
    Z = [x1 y1];
    
    fij = 0;
    Lij = 0;        
    
    Lij = alpha' * genQmtx(x,y,kernel_type,kernel_param) * alpha;
    fij = alpha' * genQc(x,y,Z,1,kernel_type,kernel_param);
    
    f = 1-2*fij+Lij-R2;
    
    figure(100)
    hold on;
    plot(x(:,1),x(:,2),[cVec(class_idx) '.']);    
    hold on  
    plot(SV(:,1),SV(:,2),'gs');
    plot(SV(:,1),SV(:,2),'m.');
    xlabel('\bf{X 축}','fontsize',12);
    ylabel('\bf{Y 축}','fontsize',12);
    
    ezplot(f,[data_min(1)-1 data_max(1)+1 data_min(2)-1 data_max(2)+1]);
    axis equal;
    title('Support Vector Domain Description 2 Dimension');     
    hold off;
    
elseif ndim == 3
    syms Z x1 y1 z1;
    Z = [x1 y1 z1];
    
    fij = 0;
    Lij = 0;        
%     for i=1:ndata
%         for j=1:ndata
%             Lij = Lij + alpha(i)*alpha(j)*Kernel_Function(x(i,:),x(j,:),kernel,kern_param);
%         end
%         fij =  fij + alpha(i) * Kernel_Function(x(i,:),Z,kernel,kern_param);
%     end
%     f = 1-2*fij+Lij-R2;

    Lij = alpha' * genQmtx(x,y,kernel_type,kernel_param) * alpha;
    fij = alpha' * genQc(x,y,Z,1,kernel_type,kernel_param);
    
    f = 1-2*fij+Lij-R2;

    figure(100)    
    hold on;
    plot3(x(:,1),x(:,2),x(:,3),[cVec(class_idx) '.']);    
    hold on;
    plot3(SV(:,1),SV(:,2),SV(:,3),'gs');
    SVDDdrawing_3D(f,class_idx,data_min,data_max,cVec);
    
    xlabel('\bf{X 축}','fontsize',12);
    ylabel('\bf{Y 축}','fontsize',12);
    zlabel('\bf{Z 축}','fontsize',12);
    title('Support Vector Domain Description 3 Dimension');     
    grid on;
    hold off;
    axis equal;
else
    printf('It cannot be drawn!!');
end