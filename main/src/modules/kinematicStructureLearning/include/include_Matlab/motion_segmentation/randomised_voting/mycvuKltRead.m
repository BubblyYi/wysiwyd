function [y, W, frames, points] = mycvuKltRead(format, start_Frame, end_Frame)
% cvuKltRead - Read KLT feature data generated by [4]
%
% Synopsis
%  W = cvuKltRead(format, sFrame, eFrame)
%
% Inputs ([]s are optional)
%  (string) format  a filename format which has one %d.
%                   See more sprintf
%  (int)    sFrame  the start frame number
%  (int)    eFrame  the end frame number
%
% Outputs ([]s are optional)
%  (matrix) W        2F x P measurement matrix (Section 3) [1]
%
% Examples
%  W = cvuKltRead('image/hotel/hotel.seq%d.feat.txt', 0, 100);
%
% References
%  [1] C. Tomasi and T. Kanade, "Shape and motion from image streams
%  -- a factorization method,"   International Journal of Computer
%  Vision, 9(2):137--154, 1992.
%  [4] KLT: An Implementation of the Kanade-Lucas-Tomasi Feature Tracker
%  http://www.ces.clemson.edu/~stb/klt/
%
% Authors
%  Naotoshi Seo <sonots(at)sonots.com>
%
% License
%  The program is free to use for non-commercial academic purposes,
%  but for course works, you must understand what is going inside to use.
%  The program can be used, modified, or re-distributed for any purposes
%  if you or one of your group understand codes (the one must come to
%  court if court cases occur.) Please contact the authors if you are
%  interested in using the program without meeting the above conditions.

% Changes
%  11/01/2006  First Edition

% sFrame = 1;
% eFrame = end_Frame - start_Frame + 1;
% 
% frames = eFrame - sFrame + 1;
sFrame = start_Frame;
eFrame = end_Frame;
% points = size(importdata(sprintf(format, 1)),1);

% y = ones(3, points, frames);

for f = sFrame:eFrame
    buf = importdata(sprintf(format, f));
    buf2 = [];  
    
%     [f, size(buf,1)]
    for p = 1:size(buf,1)
        buf2 = [buf2;str2num(buf{p})];
    end
    W(f,:,:) = buf2;
end

U = W(:, :, 1);
V = W(:, :, 2);
W = [U ; V];
W = round(W);
W_zero_idx = find(sum(W,2)==0);
W(W_zero_idx,:) = [];

% duplicated values
num_points = size(W,2);
num_frames = size(W,1)/2;
for f = 1:num_frames
    buf = [W(f,:);W(f+num_frames,:)];
    [C,IA,IC] = unique(buf','rows');
    idx_unique = sort(IA);
    idx_dup = setdiff([1:num_points],idx_unique);
    W([f,f+num_frames],idx_dup) = -1;
end

% Delete errored tracking points (whose value -1)
W = W(:, sum(W < 0, 1) == 0);

frames = size(W,1)/2;
points = size(W,2); 

for p=1:points
    for f = 1:frames
        y(1,p,f) = W(f,p);
        y(2,p,f) = W(f+frames,p);
        y(3,p,f) = 1.0;
    end
end
end